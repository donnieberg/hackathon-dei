{"version":3,"sources":["components/genderField.js","components/raceField.jsx","components/DEIChecker.jsx","components/defaultForm.js","App.js","serviceWorker.js","index.js"],"names":["binaryGenderOptions","genderOptions","GenderField","props","state","inputValue","selection","options","this","limited","className","labels","label","required","onChange","event","setState","genderChecked","target","value","map","key","id","checked","variant","React","Component","limitedRaceOptions","fullRaceOptions","LimitedRaceField","raceChecked","FullRaceField","getInputString","length","handleClose","bind","isChecked","findIndex","el","targetChecked","push","valueIndex","splice","e","trigger","slice","iconPath","assistiveText","popoverLabel","placeholder","popover","body","language","i","getIsChecked","handleCheckboxChange","onClose","RaceField","DEIChecker","children","onClick","onReplace","ariaLabelledby","renderBody","src","alt","DefaultForm","genderReplaced","raceReplaced","disabled","renderGenderField","renderRaceField","displayName","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eb159b49.chunk.js","sourcesContent":["import React from 'react';\nimport { RadioGroup, Radio } from '@salesforce/design-system-react';\n\nconst binaryGenderOptions = [ 'Male', 'Female' ];\nconst genderOptions = ['Female', 'Male', 'Nonbinary', 'Gender not listed here', 'Prefer not to say'];\n\nclass GenderField extends React.Component {\n  constructor(props) {\n    super(props);\n\t\tthis.state = {\n\t\t\tinputValue: '',\n\t\t\tselection: [],\n\t\t};\n  }\n\n  render() {\n\tlet options = this.props.limited ? binaryGenderOptions : genderOptions;\n    return (\n \t\t<RadioGroup\n          className=\"mvm\"\n\t\t\t\t\tlabels={{label: 'Gender'}}\n\t\t\t\t\trequired onChange={(event) => this.setState({ genderChecked: event.target.value })}\n\t\t\t\t>\n\t\t\t\t\t{options.map((value) => (\n\t\t\t\t\t\t<Radio\n\t\t\t\t\t\t\tkey={value}\n\t\t\t\t\t\t\tid={value}\n\t\t\t\t\t\t\tlabels={{ label: value }}\n\t\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\t\tchecked={this.state.genderChecked === value}\n\t\t\t\t\t\t\tvariant=\"base\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</RadioGroup>\n    );\n  }\n}\n\n\nexport default GenderField;\n","import React from 'react';\nimport { Combobox, Radio, RadioGroup, IconSettings, Popover, Checkbox } from '@salesforce/design-system-react';\n\nconst limitedRaceOptions = [ 'White', 'Black', 'Asian', 'Hispanic', 'Other' ];\nconst fullRaceOptions = [ 'White', 'Black or African American', 'American Indian or Alaska Native', \n'East Asian',\n'Asian Indian',\n'Native Hawaiian',\n'Other Pacific Islander (Tongan, Fijian, Marshallese, etc)',\n'Other Asian (Pakistani, Cambodian, Hmong, etc)'];\n\nclass LimitedRaceField extends React.Component {\n  constructor(props) {\n    super(props);\n\t\tthis.state = {\n\t\t};\n  }\n\n  render() {\n    return (\n        <RadioGroup\n          className=\"mvm\"\n          labels={{label: 'Race & Ethnicity'}}\n\t\t\t\t\trequired\n\t\t\t\t\tonChange={(event) => this.setState({ raceChecked: event.target.value })}\n\t\t\t\t>\n\t\t\t{limitedRaceOptions.map((value) => (\n\t\t\t\t<Radio\n\t\t\t\t\tkey={value}\n\t\t\t\t\tid={value}\n\t\t\t\t\tlabels={{ label: value }}\n\t\t\t\t\tvalue={value}\n\t\t\t\t\tchecked={this.state.raceChecked === value}\n\t\t\t\t\tvariant=\"base\"\n\t\t\t\t/>\n\t\t\t))}\n\t\t</RadioGroup>\n    );\n  }\n}\n\nclass FullRaceField extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tinputValue: 'Select an option',\n\t\t\tselection: [],\n\t\t\tchecked: [],\n\t\t};\n\t\tthis.handleClose = this.handleClose.bind(this);\n\t}\n\n\tgetIsChecked(label) {\n\t\tlet isChecked = false;\n\t\tconst checkedIndex = this.state.checked.findIndex(\n\t\t\t(el) => el.label === label\n\t\t);\n\t\tif (checkedIndex > -1) isChecked = true;\n\t\treturn isChecked;\n\t}\n\n\tgetInputString = (options) => {\n\t\tlet inputValue = '';\n\t\tif (options.length === 0) inputValue = 'Select an option';\n\t\telse if (options.length === 1) inputValue = `${options[0].label}`;\n\t\telse inputValue = `${options.length} options selected`;\n\t\treturn inputValue;\n\t};\n\n\thandleCheckboxChange(targetChecked, target, value) {\n\t\tconst { checked } = this.state;\n\t\tif (targetChecked) {\n\t\t\tchecked.push({\n\t\t\t\tid: target.id,\n\t\t\t\tlabel: value,\n\t\t\t});\n\t\t} else {\n\t\t\tconst valueIndex = checked.findIndex((el) => el.label === value);\n\t\t\tchecked.splice(valueIndex, 1);\n\t\t}\n\n\t\tconst inputValue = this.getInputString(checked);\n\t\tthis.setState({ inputValue, checked });\n\t}\n\n\thandleClose(e, { trigger }) {\n\t\tif (trigger === 'cancel') {\n\t\t\tconst inputValue = this.getInputString(this.state.selection);\n\t\t\tconst selection =\n\t\t\t\tthis.state.selection.length > 0 ? this.state.selection.slice(0) : [];\n\t\t\tthis.setState({\n\t\t\t\tchecked: selection,\n\t\t\t\tinputValue,\n\t\t\t});\n\t\t} else {\n\t\t\tconst checked =\n\t\t\t\tthis.state.checked.length > 0 ? this.state.checked.slice(0) : [];\n\t\t\tthis.setState({\n\t\t\t\tselection: checked,\n\t\t\t});\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<IconSettings iconPath=\"/assets/icons\">\n\t\t\t\t<Combobox\n\t\t\t\t\trequired\n\t\t\t\t\tassistiveText={{\n\t\t\t\t\t\tpopoverLabel: 'Race & Ethnicity',\n\t\t\t\t\t}}\n\t\t\t\t\tid=\"combobox-dialog\"\n\t\t\t\t\tlabels={{\n\t\t\t\t\t\tlabel: 'Race & Ethnicity',\n\t\t\t\t\t\tplaceholder: this.state.inputValue,\n\t\t\t\t\t}}\n\t\t\t\t\tpopover={\n\t\t\t\t\t\t<Popover\n\t\t\t\t\t\t\tbody={\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<fieldset className=\"slds-form-element\">\n\t\t\t\t\t\t\t\t\t\t<legend className=\"slds-form-element__legend slds-form-element__label\">\n\t\t\t\t\t\t\t\t\t\t\tSelect however many you want:\n\t\t\t\t\t\t\t\t\t\t</legend>\n\t\t\t\t\t\t\t\t\t\t<div className=\"slds-form-element__control\">\n\t\t\t\t\t\t\t\t\t\t\t{fullRaceOptions.map((language, i) => (\n\t\t\t\t\t\t\t\t\t\t\t\t<Checkbox\n\t\t\t\t\t\t\t\t\t\t\t\t\tchecked={this.getIsChecked(language)}\n\t\t\t\t\t\t\t\t\t\t\t\t\tid={`checkbox-${i}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey={`checkbox-${i + 1}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\tlabels={{ label: language }}\n\t\t\t\t\t\t\t\t\t\t\t\t\tonChange={(e, { checked }) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tthis.handleCheckboxChange(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tchecked,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\te.target,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlanguage\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</fieldset>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tonClose={this.handleClose}\n\t\t\t\t\t\t/>\n\t\t\t\t\t}\n\t\t\t\t\tselection={this.state.selection}\n\t\t\t\t\tvalue={this.state.inputValue}\n\t\t\t\t\tvariant=\"popover\"\n\t\t\t\t/>\n\t\t\t</IconSettings>\n\t\t);\n\t}\n}\n\nclass RaceField extends React.Component {\n\trender() {\n\t\treturn this.props.limited ? <LimitedRaceField/> : <FullRaceField/>\n\t}\n}\n\n\nexport default RaceField;\n","import React from 'react';\nimport { Popover, Button } from '@salesforce/design-system-react';\n\n\nconst HEADER_ID = \"dei-checker-header\";\nconst PROJECT_NAME = \"DEI Form Checker\";\n\n\nclass DEIChecker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n    };\n  }\n\n  renderBody() {\n    return (\n    <div>\n      <h2 id={HEADER_ID}>{PROJECT_NAME}</h2>\n\n      {this.props.children}\n    \n      <Button onClick={this.props.onReplace}>Use suggestion</Button>\n\n    </div>\n\n\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <Popover\n          ariaLabelledby={HEADER_ID}\n          body={this.renderBody()}\n          id=\"custom\"\n        >\n          <button className=\"slds-button slds-button_neutral paxs maxs dei-checker\">\n            <img src=\"icon.png\" alt={PROJECT_NAME}/> \n          </button>\n        </Popover>\n      </div>\n    );\n  }\n}\n\nexport default DEIChecker;\n","import React from 'react';\nimport { Input, RadioGroup, Radio } from '@salesforce/design-system-react';\nimport GenderField from './genderField';\nimport RaceField from './raceField';\nimport DEIChecker from './DEIChecker';\n\nclass DefaultForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      genderChecked: null,\n      raceChecked: null,\n\n      genderReplaced: false,\n      raceReplaced: false\n    };\n  }\n\n  renderGenderField() {\n    if (this.state.genderReplaced) {\n      return (\n        <GenderField/>\n      )\n    }\n\n      return (\n        <div className=\"cf\">\n          <div className=\"fl\">\n            <GenderField limited={true} />\n          </div>\n          <div className=\"fr\">\n            <DEIChecker onReplace={() => {this.setState({genderReplaced: true})}}>\n              People may not identify as male or female. Consider adding more options, like so:\n              <GenderField disabled />\n            </DEIChecker>\n          </div>\n        </div>\n\n\n      )\n  }\n\n  renderRaceField() {\n    if (this.state.raceReplaced) {\n      return (\n        <RaceField/>\n      );\n    } else {\n\n      return (\n        <div className=\"cf\">\n          <div className=\"fl\">\n            <RaceField limited={true} />\n          </div>\n          <div className=\"fr\">\n            <DEIChecker onReplace={() => {this.setState({raceReplaced: true})}}>\n            Your options may be incomplete, use phrasing considered outdated, or force users to only make one selection. Consider this format and these options instead.\n            <RaceField disabled />\n          </DEIChecker>\n          </div>\n        </div>\n\n\n      )\n    }\n  }\n\n  render() {\n    return (\n      <main className=\"slds-col slds-size_2-of-3\">\n        <h1 className=\"pbs mbm slds-text-heading_large bbs border-gray\">Scholarship Info Session</h1>\n        <p className=\"slds-text-heading_small\">\n          Want to travel abroad? Planning to attend graduate school? Looking for an award that fits your interests? Join us to learn about nationally competitive scholarships and fellowships that can help you fund your goals. Find out how to apply for 15 endorsed awards, and how to find even more opportunities. All majors and years are welcome. Pizza will be served! RSVP here.\n        </p>\n\n        <div className=\"pvl\">\n          <Input \n            id=\"full-name\" \n            className=\"mvm\"\n            label=\"Full Name\" \n            placeholder=\"Enter in name\" \n            required\n          />\n          <Input \n            id=\"email\" \n            className=\"mvm\"\n            label=\"Email\" \n            placeholder=\"Enter in email\" \n            required\n          />\n          <Input \n            id=\"phone\" \n            className=\"mvm\"\n            label=\"Phone (ie. xxx-xxx-xxxx)\" \n            placeholder=\"Enter in phone\" \n          />\n          <Input \n            id=\"major\" \n            className=\"mvm\"\n            label=\"Major(s)\" \n            placeholder=\"Enter in your major(s)\" \n            required\n          />\n\n        { this.renderGenderField() }\n        { this.renderRaceField() }\n\n        </div>\n        \n      </main>\n    );\n  }\n}\n\nDefaultForm.displayName = \"DefaultForm\";\n\nexport default DefaultForm;\n","import React from 'react';\nimport './App.css';\n\nimport DefaultForm from './components/defaultForm';\nimport DEIChecker from './components/DEIChecker';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\t\tthis.state = {\n\t\t};\n  }\n\n  render(){\n    return (\n      <div className=\"pvl slds-grid slds-grid_align-center\">\n        <DEIChecker />\n        <DefaultForm />\n      </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport IconSettings from '@salesforce/design-system-react/components/icon-settings';\n\nReactDOM.render(\n  <IconSettings iconPath=\"/assets/icons\">\n    <App />\n  </IconSettings>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}