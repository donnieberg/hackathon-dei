{"version":3,"sources":["components/genderField1.js","components/genderField2.js","components/genderQuestion.js","App.js","serviceWorker.js","index.js"],"names":["options","id","label","GenderField1","props","state","inputValue","selection","labels","placeholder","this","value","variant","React","Component","displayName","GenderField2","className","GenderQuestion","toggleSuggestion","setState","prevState","showSuggestion","replaceOriginal","onClick","showOriginal","showSuggestions","App","Boolean","window","location","hostname","match","ReactDOM","render","iconPath","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sTAGMA,EAAU,CACf,CAAEC,GAAI,IAAKC,MAAO,QAClB,CAAED,GAAI,IAAKC,MAAO,WAGbC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACHC,MAAQ,CACZC,WAAY,GACZC,UAAW,IAJO,E,sEASjB,OACE,6BACA,kBAAC,IAAD,CACDN,GAAG,sBACHO,OAAQ,CAAEN,MAAO,SAAUO,YAAa,iBACxCT,QAASA,EACTO,UAAWG,KAAKL,MAAME,UACtBI,MAAOD,KAAKL,MAAMC,WAClBM,QAAQ,kB,GAlBcC,IAAMC,WAyBjCX,EAAaY,YAAc,eAEZZ,QChCTH,EAAU,CACf,CAAEC,GAAI,IAAKC,MAAO,QAClB,CAAED,GAAI,IAAKC,MAAO,UAClB,CAAED,GAAI,IAAKC,MAAO,eAClB,CAAED,GAAI,IAAKC,MAAO,yBAClB,CAAED,GAAI,IAAKC,MAAO,2BAGbc,E,YACJ,WAAYZ,GAAQ,IAAD,8BACjB,4CAAMA,KACHC,MAAQ,CACZC,WAAY,GACZC,UAAW,IAJO,E,sEASjB,OACE,yBAAKU,UAAWP,KAAKN,MAAMa,WAC3B,kBAAC,IAAD,CACDhB,GAAG,yBACHO,OAAQ,CAAEN,MAAO,SAAUO,YAAa,iBACxCT,QAASA,EACTO,UAAWG,KAAKL,MAAME,UACtBI,MAAOD,KAAKL,MAAMC,WAClBM,QAAQ,kB,GAlBcC,IAAMC,WAyBjCE,EAAaD,YAAc,eAEZC,QC2BAE,E,YA3Db,WAAYd,GAAQ,IAAD,8BACjB,4CAAMA,KAORe,iBAAmB,WACjB,EAAKC,UAAU,SAAAC,GAAS,MAAK,CAC3BC,gBAAiBD,EAAUC,oBAVZ,EAcnBC,gBAAkB,WAChB,EAAKH,UAAU,SAAAC,GAAS,MAAK,CAC3BE,iBAAiB,OAdrB,EAAKlB,MAAQ,CACTiB,gBAAgB,EAChBC,iBAAiB,GAJF,E,4EAqBjB,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CACErB,MAAM,2BACNsB,QAASd,KAAKS,sB,wCAOpB,OACE,6BACE,+GACA,kBAAC,EAAD,MACA,kBAAC,IAAD,CACEjB,MAAM,UACNsB,QAASd,KAAKa,qB,+BAOpB,OACE,yBAAKN,UAAU,uBACb,yBAAKA,UAAU,iCACVP,KAAKL,MAAMkB,gBAAwC,kBAAC,EAAD,MAAtBb,KAAKe,gBAEvC,yBAAKR,UAAU,iCACXP,KAAKL,MAAMiB,iBAAmBZ,KAAKL,MAAMkB,gBAAkBb,KAAKgB,kBAAoB,W,GArDnEb,IAAMC,WCgBpBa,E,YAfb,WAAYvB,GAAQ,IAAD,8BACjB,4CAAMA,KACHC,MAAQ,GAFM,E,sEAOjB,OACE,yBAAKY,UAAU,OACb,kBAAC,EAAD,W,GAVUJ,IAAMC,WCOJc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OACP,kBAAC,IAAD,CAAcC,SAAS,iBACrB,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.361a6053.chunk.js","sourcesContent":["import React from 'react';\nimport { Combobox } from '@salesforce/design-system-react';\n\nconst options = [\n\t{ id: '1', label: 'Male' },\n\t{ id: '2', label: 'Female' },\n];\n\nclass GenderField1 extends React.Component {\n  constructor(props) {\n    super(props);\n\t\tthis.state = {\n\t\t\tinputValue: '',\n\t\t\tselection: [],\n\t\t};\n  }\n\n  render() {\n    return (\n      <div>\n      <Combobox\n\t\t\t\t\tid=\"binary-gender-field\"\n\t\t\t\t\tlabels={{ label: 'Gender', placeholder: 'Select Gender', }}\n\t\t\t\t\toptions={options}\n\t\t\t\t\tselection={this.state.selection}\n\t\t\t\t\tvalue={this.state.inputValue}\n\t\t\t\t\tvariant=\"readonly\"\n\t\t\t\t/>\n      </div>\n    );\n  }\n}\n\nGenderField1.displayName = \"GenderField1\";\n\nexport default GenderField1;\n","import React from 'react';\nimport { Combobox, Button } from '@salesforce/design-system-react';\n\nconst options = [\n\t{ id: '1', label: 'Male' },\n\t{ id: '2', label: 'Female' },\n\t{ id: '3', label: 'Transgender' },\n\t{ id: '4', label: 'Gender Non-conforming' },\n\t{ id: '5', label: 'Gender not listed here' },\n];\n\nclass GenderField2 extends React.Component {\n  constructor(props) {\n    super(props);\n\t\tthis.state = {\n\t\t\tinputValue: '',\n\t\t\tselection: [],\n\t\t};\n  }\n\n  render() {\n    return (\n      <div className={this.props.className}>\n      <Combobox\n\t\t\t\t\tid=\"nonbinary-gender-field\"\n\t\t\t\t\tlabels={{ label: 'Gender', placeholder: 'Select Gender', }}\n\t\t\t\t\toptions={options}\n\t\t\t\t\tselection={this.state.selection}\n\t\t\t\t\tvalue={this.state.inputValue}\n\t\t\t\t\tvariant=\"readonly\"\n\t\t\t\t/>\n      </div>\n    );\n  }\n}\n\nGenderField2.displayName = \"GenderField2\";\n\nexport default GenderField2;\n","import React from 'react';\nimport { Button } from '@salesforce/design-system-react';\nimport GenderField1 from './genderField1';\nimport GenderField2 from './genderField2';\n\nclass GenderQuestion extends React.Component {\n  constructor(props) {\n    super(props);\n\t\tthis.state = {\n      showSuggestion: false,\n      replaceOriginal: false,\n\t\t};\n  }\n\n  toggleSuggestion = () => {\n    this.setState( prevState => ({\n      showSuggestion: !prevState.showSuggestion\n    }))\n  } \n\n  replaceOriginal = () => {\n    this.setState( prevState => ({\n      replaceOriginal: true\n    }))\n  } \n\n  showOriginal() {\n    return (\n      <div>\n        <GenderField1 />\n        <Button \n          label=\"Toggle Suggestion on/off\"\n          onClick={this.toggleSuggestion}\n        />\n      </div>\n    )\n  }\n\n  showSuggestions() {\n    return (\n      <div>\n        <p>People may not identify as male or female. Consider adding more options like so.</p>\n        <GenderField2 /> \n        <Button \n          label=\"Replace\"\n          onClick={this.replaceOriginal}\n        />\n      </div>\n     )\n  }\n\n  render() {\n    return (\n      <div className=\"slds-grid slds-wrap\">\n        <div className=\"slds-col slds-size_1-of-2 phl\">\n          { !this.state.replaceOriginal ? this.showOriginal() : <GenderField2 /> }\n        </div>\n        <div className=\"slds-col slds-size_1-of-2 phl\">\n          { this.state.showSuggestion && !this.state.replaceOriginal ? this.showSuggestions() : null }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default GenderQuestion;\n\n","import React from 'react';\nimport './App.css';\n\nimport GenderQuestion from './components/genderQuestion';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\t\tthis.state = {\n\t\t};\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <GenderQuestion />\n      </div>\n      );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport IconSettings from '@salesforce/design-system-react/components/icon-settings';\n\nReactDOM.render(\n  <IconSettings iconPath=\"/assets/icons\">\n    <App />\n  </IconSettings>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}